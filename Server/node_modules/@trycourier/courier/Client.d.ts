/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "@trycourier/courier/environments";
import * as core from "@trycourier/courier/core";
import * as Courier from "@trycourier/courier/api";
import { Audiences } from "@trycourier/courier/api/resources/audiences/client/Client";
import { AuditEvents } from "@trycourier/courier/api/resources/auditEvents/client/Client";
import { AuthTokens } from "@trycourier/courier/api/resources/authTokens/client/Client";
import { Automations } from "@trycourier/courier/api/resources/automations/client/Client";
import { Brands } from "@trycourier/courier/api/resources/brands/client/Client";
import { Bulk } from "@trycourier/courier/api/resources/bulk/client/Client";
import { Lists } from "@trycourier/courier/api/resources/lists/client/Client";
import { Messages } from "@trycourier/courier/api/resources/messages/client/Client";
import { Notifications } from "@trycourier/courier/api/resources/notifications/client/Client";
import { Profiles } from "@trycourier/courier/api/resources/profiles/client/Client";
import { Templates } from "@trycourier/courier/api/resources/templates/client/Client";
import { Tenants } from "@trycourier/courier/api/resources/tenants/client/Client";
import { Translations } from "@trycourier/courier/api/resources/translations/client/Client";
import { Users } from "@trycourier/courier/api/resources/users/client/Client";
export declare namespace CourierClient {
    interface Options {
        environment?: core.Supplier<environments.CourierEnvironment | string>;
        authorizationToken?: core.Supplier<core.BearerToken | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
    interface IdempotentRequestOptions extends RequestOptions {
        idempotencyKey?: string | undefined;
        idempotencyExpiry?: number | undefined;
    }
}
export declare class CourierClient {
    protected readonly _options: CourierClient.Options;
    constructor(_options?: CourierClient.Options);
    /**
     * Use the send API to send a message to one or more recipients.
     */
    send(request: Courier.SendMessageRequest, requestOptions?: CourierClient.IdempotentRequestOptions): Promise<Courier.SendMessageResponse>;
    protected _audiences: Audiences | undefined;
    get audiences(): Audiences;
    protected _auditEvents: AuditEvents | undefined;
    get auditEvents(): AuditEvents;
    protected _authTokens: AuthTokens | undefined;
    get authTokens(): AuthTokens;
    protected _automations: Automations | undefined;
    get automations(): Automations;
    protected _brands: Brands | undefined;
    get brands(): Brands;
    protected _bulk: Bulk | undefined;
    get bulk(): Bulk;
    protected _lists: Lists | undefined;
    get lists(): Lists;
    protected _messages: Messages | undefined;
    get messages(): Messages;
    protected _notifications: Notifications | undefined;
    get notifications(): Notifications;
    protected _profiles: Profiles | undefined;
    get profiles(): Profiles;
    protected _templates: Templates | undefined;
    get templates(): Templates;
    protected _tenants: Tenants | undefined;
    get tenants(): Tenants;
    protected _translations: Translations | undefined;
    get translations(): Translations;
    protected _users: Users | undefined;
    get users(): Users;
    protected _getAuthorizationHeader(): Promise<string>;
}
